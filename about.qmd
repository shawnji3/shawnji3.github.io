---
title: "Data Visualization"
---

# The evolution of public taste in music through the 21st century

![](images/clipboard-3938451565.png){width="297"}

Understanding the evolution of public taste in musics gives us insights into broader cultural shifts and trends. The analysis of streaming data would show the changes in the popularity of different music genres in different time and this can reflect the shifts in cultural preferences. Music can act as a cultural and economic force. The public preferences for popular songs can implicate some social and economic implications, this relates to consumer spending habits, brand perception and even political attitudes. Public preferences directly influence the success of artists, labels, streaming platforms,etc By tracking changes in popular song preferences, stakeholders in the music industry can adapt their strategies to meet evolving consumer demands.

There are 3 data visualizations in the following paragraphs, which include a **trend line**, a **pie chart** and an **interactive bar chart**.

## Trend lines of each genre from 2000 - 2022

The first data visualization is a trend line where it shows the trend of the popularity of a specific genre through 2000-2022. There are 6 genres in total, 'r&b', 'pop', 'hip pop', 'soul', 'rock', 'country''. There are different colors labeled for different genres


```{r, eval=TRUE, echo=TRUE}
# Load required libraries
library(ggplot2)
library(dplyr)

# Read the dataset
music_data <- read.csv("/Users/shawnji/Documents/billboard_used.csv")  # Replace "your_dataset.csv" with the actual file path

# List of genres
genres <- c('r&b', 'pop', 'hip pop', 'soul', 'rock', 'country')

# Function to replace genre with matching genre from the list
replace_genre <- function(genre_str, genre_list) {
  for (genre in genre_list) {
    if (genre %in% unlist(strsplit(gsub("\\[|\\]|'", "", genre_str), ", "))) {
      return(genre)
    }
  }
  return(NA)
}

# Modify 'Genres' column to have only the matching genre
music_data$Genres <- sapply(music_data$Genres, replace_genre, genre_list = genres)

# Remove rows with NA in 'Genres' column
music_data <- music_data[complete.cases(music_data$Genres), ]

# Reshape the data into long format
music_data_long <- reshape2::melt(music_data, id.vars = c("Year", "Genres"))

# Plot
music_data_long %>%
  group_by(Year, Genres) %>% 
  count() %>%
ggplot(aes(x = Year, y = n, color = Genres)) +
  geom_point() +
  geom_line() +
  labs(title = "Genre Trends Over Time",
       x = "Year",
       y = "Number of Songs",
       color = "Genre") +
  scale_color_manual(values = c("r&b" = "#FFB6C1", "pop" = "#87CEEB", "hip pop" = "#FFD700",
                                 "soul" = "#FF4500", "rock" = "#9400D3",
                                "country" = "#FF1493")) +
  theme_minimal()
```

```{r,eval=TRUE,echo=TRUE}

music_data_long %>%
   group_by(Year, Genres) %>% 
  count() %>%
  ggplot(aes(x = Year, y = n, fill = Genres)) +
  geom_col(position = "fill")

# Function to replace genre with matching genre from the list
# Load required libraries
library(ggplot2)
library(dplyr)

# Read the dataset
music_data <- read.csv("/Users/shawnji/Documents/billboard_used.csv")  # Replace "your_dataset.csv" with the actual file path

# List of genres
genres <- c('r&b', 'pop', 'hip pop', 'soul', 'rock', 'country')

replace_genre <- function(genre_str, genre_list) {
  for (genre in genre_list) {
    if (genre %in% unlist(strsplit(gsub("\\[|\\]|'", "", genre_str), ", "))) {
      return(genre)
    }
  }
  return(NA)
}

# Modify 'Genres' column to have only the matching genre
music_data$Genres <- sapply(music_data$Genres, replace_genre, genre_list = genres)

# Remove rows with NA in 'Genres' column
music_data <- music_data[complete.cases(music_data$Genres), ]

# Filter data for the year 2000
music_data_2000 <- filter(music_data, Year == 2000)

# Count occurrences of each genre in 2000
genre_counts_2000 <- table(music_data_2000$Genres)

# Filter data for the year 2022
music_data_2022 <- filter(music_data, Year == 2022)

# Count occurrences of each genre in 2022
genre_counts_2022 <- table(music_data_2022$Genres)

# Create data frames for pie charts
pie_data_2000 <- data.frame(genre = names(genre_counts_2000), count = as.numeric(genre_counts_2000))
pie_data_2022 <- data.frame(genre = names(genre_counts_2022), count = as.numeric(genre_counts_2022))

# Calculate percentage for each genre
pie_data_2000$percentage <- pie_data_2000$count / sum(pie_data_2000$count) * 100
pie_data_2022$percentage <- pie_data_2022$count / sum(pie_data_2022$count) * 100

# Plot pie chart for 2000
pie_chart_2000 <- ggplot(pie_data_2000, aes(x = "", y = percentage, fill = genre)) +
  geom_bar(stat = "identity", color = "black") +
  geom_text(aes(label = paste0(round(percentage), "%")), position = position_stack(vjust = 0.5), size = 3.5) +
  coord_polar("y", start = 0) +
  labs(title = "Genre Distribution in 2000") +
  theme_void() +
  scale_fill_brewer(palette = "Set3") +
  theme(legend.position = "right")

# Plot pie chart for 2022
pie_chart_2022 <- ggplot(pie_data_2022, aes(x = "", y = percentage, fill = genre)) +
  geom_bar(stat = "identity", color = "black") +
  geom_text(aes(label = paste0(round(percentage), "%")), position = position_stack(vjust = 0.5), size = 3.5) +
  coord_polar("y", start = 0) +
  labs(title = "Genre Distribution in 2022") +
  theme_void() +
  scale_fill_brewer(palette = "Set3") +
  theme(legend.position = "right")


# Print pie chartsS
print(pie_chart_2000)
print(pie_chart_2022)
```
